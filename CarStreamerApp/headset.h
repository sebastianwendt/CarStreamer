/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p headset.h:headset.cpp headset.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef HEADSET_H_1371667965
#define HEADSET_H_1371667965

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.Headset
 */
class OrgBluezHeadsetInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.Headset"; }

public:
    OrgBluezHeadsetInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBluezHeadsetInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CancelCall()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CancelCall"), argumentList);
    }

    inline QDBusPendingReply<> Connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Connect"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<ushort> GetMicrophoneGain()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetMicrophoneGain"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<ushort> GetSpeakerGain()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetSpeakerGain"), argumentList);
    }

    inline QDBusPendingReply<> IndicateCall()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IndicateCall"), argumentList);
    }

    inline QDBusPendingReply<bool> IsConnected()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsConnected"), argumentList);
    }

    inline QDBusPendingReply<bool> IsPlaying()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsPlaying"), argumentList);
    }

    inline QDBusPendingReply<> Play()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Play"), argumentList);
    }

    inline QDBusPendingReply<> SetMicrophoneGain(ushort in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QLatin1String("SetMicrophoneGain"), argumentList);
    }

    inline QDBusPendingReply<> SetProperty(const QString &in0, const QDBusVariant &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusPendingReply<> SetSpeakerGain(ushort in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QLatin1String("SetSpeakerGain"), argumentList);
    }

    inline QDBusPendingReply<> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AnswerRequested();
    void CallTerminated();
    void Connected();
    void Disconnected();
    void MicrophoneGainChanged(ushort in0);
    void Playing();
    void PropertyChanged(const QString &in0, const QDBusVariant &in1);
    void SpeakerGainChanged(ushort in0);
    void Stopped();
};

namespace org {
  namespace bluez {
    typedef ::OrgBluezHeadsetInterface Headset;
  }
}
#endif
